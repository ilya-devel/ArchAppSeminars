openapi: 3.0.4
info:
  title: Robot Cleaner Application
  description: |-
    Приложение для подключения роботов-пылесосов и их управления
  version: 1.0.0
servers:
  - url: https://someserver.io/api/v1
tags:
  - name: robot
    description: Your robots
  - name: room
    description: Your rooms
  - name: task
    description: Task for your robots
paths:
  /robot:
    post:
      tags:
        - robot
      summary: Add a new Robot.
      description: Add a new Robot.
      operationId: addRobot
      requestBody:
        description: Create a new Robot
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Robot'
          application/xml:
            schema:
              $ref: '#/components/schemas/Robot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Robot'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'
            application/xml:
              schema:
                $ref: '#/components/schemas/Robot'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - robotcleanerapp_auth:
            - write:robots
            - read:robots
  /robot/{robotId}:
    get:
      tags:
        - robot
      summary: Find Robot by ID.
      description: Returns a single Robot.
      operationId: getRobotById
      parameters:
        - name: robotId
          in: path
          description: ID of robot to return
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'
            application/xml:
              schema:
                $ref: '#/components/schemas/Robot'
        '400':
          description: Invalid ID supplied
        '404':
          description: Robot not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - api_key: []
        - robotcleanerapp_auth:
            - write:robots
            - read:robots
    delete:
      tags:
        - robot
      summary: Deletes a robot.
      description: Delete a robot.
      operationId: deleteRobot
      parameters:
        - name: robotId
          in: path
          description: Robot id to delete
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Robot deleted
        '400':
          description: Invalid pet value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - robotcleanerapp_auth:
            - write:robots
            - read:robots
    put:
      tags:
        - robot
      summary: Update an existing robot.
      description: Update an existing robot by Id.
      operationId: updateRobot
      parameters:
        - name: robotId
          in: path
          description: ID of robot to return
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Update an existent Robot in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Robot'
          application/xml:
            schema:
              $ref: '#/components/schemas/Robot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Robot'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Robot'
            application/xml:
              schema:
                $ref: '#/components/schemas/Robot'
        '400':
          description: Invalid ID supplied
        '404':
          description: Robot not found
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - robotcleanerapp_auth:
            - write:robots
            - read:robots

  /room/:
    get:
      tags:
        - room
      summary: Returns list of rooms.
      description: Returns a list of rooms.
    post:
      tags:
        - room
      summary: Add new room.
      description: Add new room.
  /room/{roomId}:
    get:
      tags:
        - room
      summary: Returns into about room.
      description: Returns into about room.
    put:
      tags:
        - room
      summary: Update room by ID.
      description: Update room by ID.
    delete:
      tags:
        - room
      summary: Remove room by ID.
      description: Remove room by ID
      
  /task/:
    get:
      tags:
        - task
      summary: Returns list of task.
      description: Returns a list of task.
    post:
      tags:
        - task
      summary: Add new task.
      description: Add new task.
  /task/{roomId}:
    get:
      tags:
        - task
      summary: Returns into about task.
      description: Returns into about task.
    put:
      tags:
        - task
      summary: Update task by ID.
      description: Update task by ID.
    delete:
      tags:
        - task
      summary: Remove task by ID.
      description: Remove task by ID
      
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Robot:
      required:
        - id
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        model:
          type: string
          example: SomeFirm someModels T100-
        is_status:
          type: string
          example: Ready
        is_empty:
          type: bool
          example: true
        battery_status:
          type: integer
          format: int16
          max: 100
          min: 0
          example: 73
      xml:
        name: robot
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    robotcleanerapp_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://someserver.io/oauth/authorize
          scopes:
            "write:robots": modify robots in your account
            "read:robots": read your robots
    api_key:
      type: apiKey
      name: api_key
      in: header